{"version":3,"sources":["jquery.js"],"names":["window","$","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","api","Object","create","prototype","assign","oldApi","fn","constructor","addClass","className","i","length","classList","add","find","selector","array","concat","from","end","each","call","parent","node","indexOf","parentNode","push","children","print","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,CAAP,GAAWD,OAAOE,MAAP,GAAgB,UAAUC,eAAV,EAA2B;AAClD;;;AAGA,QAAIC,iBAAJ;AACA,QAAI,OAAOD,eAAP,KAA2B,QAA/B,EAAyC;AACrCC,mBAAWC,SAASC,gBAAT,CAA0BH,eAA1B,CAAX,CADqC,CACkB;AAC1D,KAFD,MAEO,IAAIA,2BAA2BI,KAA/B,EAAsC;AACzCH,mBAAWD,eAAX;AACH;;AAED,QAAMK,MAAMC,OAAOC,MAAP,CAAcR,OAAOS,SAArB,CAAZ,CAXkD,CAWN;AAC5C;AACA;AACAF,WAAOG,MAAP,CAAcJ,GAAd,EAAmB;AACfJ,kBAAWA,QADI;AAEfS,gBAAQV,gBAAgBU;AAFT,KAAnB;AAIA,WAAOL,GAAP;AACH,CAnBD;;AAqBAN,OAAOY,EAAP,GAAYZ,OAAOS,SAAP,GAAmB;AAC3BT,YAAQ,IADmB;AAE3Ba,iBAAab,MAFc;AAG3Bc,YAH2B,oBAGlBC,SAHkB,EAGP;AAChB;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKd,QAAL,CAAce,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3C,iBAAKd,QAAL,CAAcc,CAAd,EAAiBE,SAAjB,CAA2BC,GAA3B,CAA+BJ,SAA/B;AACH;AACD,eAAO,IAAP,CALgB,CAKJ;AACf,KAT0B;AAU3BK,QAV2B,gBAUtBC,QAVsB,EAUZ;AACX,YAAIC,QAAQ,EAAZ;AACA,aAAK,IAAIN,IAAI,CAAb,EAAgBA,IAAI,KAAKd,QAAL,CAAce,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3CM,oBAAQA,MAAMC,MAAN,CAAalB,MAAMmB,IAAN,CAAW,KAAKtB,QAAL,CAAcc,CAAd,EAAiBZ,gBAAjB,CAAkCiB,QAAlC,CAAX,CAAb,CAAR;AACH;AACDC,cAAMX,MAAN,GAAe,IAAf,CALW,CAKU;AACrB,eAAOX,OAAOsB,KAAP,CAAP;AACH,KAjB0B;AAkB3BG,OAlB2B,iBAkBrB;AACF,eAAO,KAAKd,MAAZ,CADE,CACkB;AACvB,KApB0B;AAqB3Be,QArB2B,gBAqBtBd,EArBsB,EAqBlB;AACL,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAI,KAAKd,QAAL,CAAce,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3CJ,eAAGe,IAAH,CAAQ,IAAR,EAAc,KAAKzB,QAAL,CAAcc,CAAd,CAAd,EAAgCA,CAAhC;AACH;AACD,eAAO,IAAP;AACH,KA1B0B;AA2B3BY,UA3B2B,oBA2BlB;AACL,YAAMN,QAAQ,EAAd;AACA,aAAKI,IAAL,CAAU,UAACG,IAAD,EAAU;AAChB,gBAAIP,MAAMQ,OAAN,CAAcD,KAAKE,UAAnB,MAAmC,CAAC,CAAxC,EAA2C;AACvCT,sBAAMU,IAAN,CAAWH,KAAKE,UAAhB;AACH;AACJ,SAJD;AAKA,eAAO/B,OAAOsB,KAAP,CAAP;AACH,KAnC0B;AAoC3BW,YApC2B,sBAoChB;AACP,YAAMX,QAAQ,EAAd;AACA,aAAKI,IAAL,CAAU,UAACG,IAAD,EAAU;AAChBP,kBAAMU,IAAN,iCAAcH,KAAKI,QAAnB,GADgB,CACa;AAEhC,SAHD;AAIA,eAAOjC,OAAOsB,KAAP,CAAP;AACH,KA3C0B;AA4C3BY,SA5C2B,mBA4CnB;AACJC,gBAAQC,GAAR,CAAY,KAAKlC,QAAjB;AACH;AA9C0B,CAA/B","file":"jquery.9467f8cc.map","sourceRoot":"../src","sourcesContent":["window.$ = window.jQuery = function (selectorOrArray) {\n    /*\n    * 选择器或者数组\n    * */\n    let elements;\n    if (typeof selectorOrArray === 'string') {\n        elements = document.querySelectorAll(selectorOrArray); // 获取元素\n    } else if (selectorOrArray instanceof Array) {\n        elements = selectorOrArray;\n    }\n\n    const api = Object.create(jQuery.prototype) // 创建一个对象，这个对象的__proto__指向括号里的东西\n    // api.elements = elements;\n    // api.oldApi =selectorOrArray.oldApi\n    Object.assign(api, {\n        elements : elements,\n        oldApi: selectorOrArray.oldApi\n    })\n    return api;\n}\n\njQuery.fn = jQuery.prototype = {\n    jQuery: true,\n    constructor: jQuery,\n    addClass(className) {\n        // 遍历所以刚才获取的元素，添加.red等\n        for (let i = 0; i < this.elements.length; i++) {\n            this.elements[i].classList.add(className)\n        }\n        return this;// 能够进行链式操作关键是返回了同样的api对象，this指的就是api\n    },\n    find(selector) {\n        let array = []\n        for (let i = 0; i < this.elements.length; i++) {\n            array = array.concat(Array.from(this.elements[i].querySelectorAll(selector)));\n        }\n        array.oldApi = this; // 将旧的api放到数组身上\n        return jQuery(array);\n    },\n    end() {\n        return this.oldApi; // 将当前新的api中旧的api返回\n    },\n    each(fn) {\n        for (let i = 0; i < this.elements.length; i++) {\n            fn.call(null, this.elements[i], i);\n        }\n        return this;\n    },\n    parent() {\n        const array = [];\n        this.each((node) => {\n            if (array.indexOf(node.parentNode) === -1) {\n                array.push(node.parentNode)\n            }\n        })\n        return jQuery(array);\n    },\n    children() {\n        const array = []\n        this.each((node) => {\n            array.push(...node.children) //...把每个节点分开\n\n        })\n        return jQuery(array)\n    },\n    print() {\n        console.log(this.elements);\n    }\n}\n"]}